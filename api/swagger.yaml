openapi: 3.0.0
info:
  title: Vera Drive Service
  description: URL storage and management service for the Vera ecosystem
  version: DEV

components:
  securitySchemes: 
    userToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: User access token for API calls

  schemas:
    InputError:
      type: object
      properties:
        error:
          type: string
      required:
        - error

    AppError:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time
      required:
        - code
        - message
        - timestamp

    BaseURL:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          maxLength: 20
          example: "My Folder"
        type:
          type: string
          enum: [folder, url]
          example: "folder"
        url:
          type: string
          nullable: true
          example: null
        created_at:
          type: string
          format: date-time
          example: "1970-01-01T00:00:00.000Z"
        updated_at:
          type: string
          format: date-time
          example: "1970-01-01T00:00:00.000Z"
      required:
        - id
        - name
        - type
        - url
        - created_at
        - updated_at

    URL:
      allOf:
        - $ref: '#/components/schemas/BaseURL'
        - type: object
          properties:
            parent:
              type: array
              items:
                $ref: '#/components/schemas/BaseURL'
            children:
              type: array
              items:
                $ref: '#/components/schemas/BaseURL'
          required:
            - parent
            - children

  responses:
    Unauthorized:
      description: Unauthorized - Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
          examples:
            invalid_access_token:
              summary: Invalid access token
              value:
                code: "401_01_006"
                message: "Invalid access token"
                timestamp: "1970-01-01T00:00:00Z"
            invalid_token_issuer:
              summary: Invalid token issuer
              value:
                code: "401_01_007"
                message: "Invalid token issuer"
                timestamp: "1970-01-01T00:00:00Z"
            invalid_auth_header:
              summary: Invalid authorization header
              value:
                code: "401_01_008"
                message: "Invalid authorization header"
                timestamp: "1970-01-01T00:00:00Z"
            identityServiceUnavailable:
              summary: Identity service unavailable
              value:
                code: "401_02_001"
                message: "Identity service unavailable"
                timestamp: "1970-01-01T00:00:00.000Z"
            invalidClaimsInUserToken:
              summary: Invalid claims in user token
              value:
                code: "401_02_002"
                message: "Invalid claims in user token"
                timestamp: "1970-01-01T00:00:00.000Z"
    Forbidden:
      description: Forbidden - Access denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
          example:
            code: "403_01_011"
            message: "User not authorized"
            timestamp: "1970-01-01T00:00:00Z"
    BadRequest:
      description: Invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InputError'
          example:
            error: "invalid request body | ..."
    
    URLNotFound:
      description: URL not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
          example:
            code: "404_02_003"
            message: "URL not found"
            timestamp: "1970-01-01T00:00:00.000Z"
    ForbiddenOrURLAccessDenied:
      description: Forbidden or URL access denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
          examples:
            forbidden:
              summary: Forbidden
              value:
                code: "403_01_011"
                message: "User not authorized"
                timestamp: "1970-01-01T00:00:00Z"
            urlAccessDenied:
              summary: URL access denied
              value:  
                code: "403_02_004"
                message: "URL access denied"
                timestamp: "1970-01-01T00:00:00.000Z"
    URLNameAlreadyExists:
      description: URL name already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
          example:
            code: "400_02_005"
            message: "URL name already exists"
            timestamp: "1970-01-01T00:00:00.000Z"

paths:
  /healthz:
    get:
      tags:
        - Tool
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"

  /urls:
    post:
      tags:
        - URL
      security:
        - userToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                parent_id:
                  type: string
                  format: uuid
                  example: "123e4567-e89b-12d3-a456-426614174001"
                name:
                  type: string
                  maxLength: 20
                  example: "My Folder"
                type:
                  type: string
                  enum: [folder, url]
                  example: "folder"
                url:
                  type: string
                  nullable: true
                  example: null
              required:
                - parent_id
                - name
                - type
                - url
      responses:
        '204':
          description: URL or folder created successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenOrURLAccessDenied'
        '404':
          $ref: '#/components/responses/URLNotFound'
          
  /urls/root-id:
    get:
      tags:
        - URL
      security:
        - userToken: []
      responses:
        '200':
          description: Root ID
          content:
            application/json:
              schema:
                type: string
                format: uuid
                example: "123e4567-e89b-12d3-a456-426614174000"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /urls/{id}:
    parameters:
      - name: id
        in: path
        description: Folder ID to list contents of
        required: true
        schema:
          type: string
          format: uuid

    get:
      tags:
        - URL
      security:
        - userToken: []
      responses:
        '200':
          description: List of URLs and folders and its parent folder within the folder
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/URL'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenOrURLAccessDenied'
        '404':
          $ref: '#/components/responses/URLNotFound'

    put:
      tags:
        - URL
      security:
        - userToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                parent_id:
                  type: string
                  format: uuid
                  example: "123e4567-e89b-12d3-a456-426614174001"
                name:
                  type: string
                  maxLength: 20
                  example: "My Bookmarks"
                url:
                  type: string
                  nullable: true
                  example: "https://example.com"
      responses:
        '204':
          description: URL or folder updated successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenOrURLAccessDenied'
        '404':
          $ref: '#/components/responses/URLNotFound'

    delete:
      tags:
        - URL
      security:
        - userToken: []
      responses:
        '204':
          description: URL or folder deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenOrURLAccessDenied'
        '404':
          $ref: '#/components/responses/URLNotFound'
